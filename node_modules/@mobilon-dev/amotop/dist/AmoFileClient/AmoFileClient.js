"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmoFileClient = void 0;
var axios_1 = require("axios");
var axios_logger_1 = require("axios-logger");
var jwt_decode_1 = require("jwt-decode");
var AmoFileClient = (function () {
    function AmoFileClient(accessToken, options) {
        this.driveUrl = options.driveUrl ? options.driveUrl : 'https://drive-b.amocrm.ru';
        if (!accessToken) {
            throw new Error('ERROR_NO_ACCESSTOKEN');
        }
        this.accessToken = accessToken;
        this.instance = axios_1.default.create({
            baseURL: this.driveUrl,
            headers: {
                Authorization: "Bearer ".concat(this.accessToken),
            },
            timeout: options.timeout || 10000,
        });
        if (options === null || options === void 0 ? void 0 : options.debug) {
            var config_1 = {
                prefixText: 'AmoFileClient',
                headers: false,
                params: true,
            };
            this.instance.interceptors.request.use(function (request) {
                return (0, axios_logger_1.requestLogger)(request, config_1);
            });
            this.instance.interceptors.response.use(function (response) {
                return (0, axios_logger_1.responseLogger)(response, config_1);
            });
        }
    }
    AmoFileClient.prototype.getFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/v1.0/files";
                        return [4, this.instance.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoFileClient.prototype.hasScope = function (scope) {
        var jwtObject = (0, jwt_decode_1.jwtDecode)(this.accessToken);
        var scopes = jwtObject.scopes;
        return scopes.find(function (el) { return el === scope; }) ? true : false;
    };
    AmoFileClient.prototype.hasFilesScope = function () {
        return this.hasScope('files');
    };
    AmoFileClient.prototype.hasFilesDeleteScope = function () {
        return this.hasScope('files_delete');
    };
    AmoFileClient.prototype.getFileByUUID = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/v1.0/files/".concat(uuid);
                        return [4, this.instance.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoFileClient.prototype.createSession = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var url, data, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/v1.0/sessions';
                        data = {
                            file_name: params.fileName,
                            file_size: params.fileSize,
                            content_type: params.contentType,
                            with_preview: true,
                        };
                        return [4, this.instance.post(url, data)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    AmoFileClient.prototype.uploadFilePart = function (uploadUrl, data) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.instance.post(uploadUrl, data)];
                    case 1:
                        response = _a.sent();
                        return [2, response.data];
                }
            });
        });
    };
    return AmoFileClient;
}());
exports.AmoFileClient = AmoFileClient;
